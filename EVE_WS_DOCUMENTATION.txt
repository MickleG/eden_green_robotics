DEFINITIONS:
- https://github.com/MickleG/eden_green_robotics contains the non-ROS version of the code that runs EVE. This is mainly legacy at this point. However, this repo contains test data such as both rgb and depth images for the entirety of a plant harvesting procedure, as well as this documentation package.
- https://github.com/MickleG/eve_ws contains the source code for the ROS noetic workspace that EVE runs on.


DOCKER SETUP:
- eve_ws is built on ROS noetic. It is designed to be built and run in a docker container run on the eve_ros_image_v5 located at: https://hub.docker.com/repository/docker/mickleg/eden_green_robotics/general. 
- Start off by installing docker (follow apt repository steps at: https://docs.docker.com/engine/install/raspberry-pi-os/)
- Run this command to pull the proper image for EVE by running: "docker pull mickleg/eden_green_robotics:eve_ros_image_v5"
- You now need to create the docker network that the container connects to. This allows multiple containers to talk to one another for easy integration in the future. This can be done by running "docker network create yourNetworkName". You can name the network anything you want.
- Once the image is pulled, you will need to run the image. The following command has been created and tested such that the container will have access to all USB ports, and any graphical tools like cv::imshow or sublime text will forward to the raspberry pi display. It will also connect to the docker network you set up previously: "docker run -it --privileged --device=/dev/bus/usb --network yourNetworkName --env="DISPLAY" --volume="/tmp/.X11-unix:/tmp/.X11-unix:rw" --name eve_container mickleg/eden_green_robotics:eve_ros_image_v5". In this case, the container is named eve_container and it is connected to yourNetworkName. The container is built upon the image mickleg/eden_green_robotics:eve_ros_image_v5. DO NOT CHANGE ANY OF THE OTHER ARGUMENTS IN THIS COMMAND, AS IT WILL NOT BE GUARANTEED TO WORK AS INTENDED. You will know if this run is successful if the terminal goes from saying "edengreen@eve" in green to "root@some string of characters" in gray. This step as well as the previous steps only need to be done once. For all future times, use the docker exec command listed below.
- Once you have verified the container is running, you can exit by running "exit". This should bring you back to the raspberry pi terminal (edengreen@eve in green). You can re-enter the container by running "docker exec -it nameOfYourContainer bash". Upon shutdown you may have to run "docker start nameOfYourContainer" first before you can run the docker exec command.

GIT REPO AND ROS SETUP:
- Source the ros distro already installed onto the docker image by running "ros_entrypoint.sh" in the / directory.
- Clone eve_ws from https://github.com/MickleG/eve_ws into the home directory on the raspberry pi: "cd ~" followed by "git clone https://github.com/MickleG/eve_ws".
- cd into eve_ws, and run "catkin_make" to build the ROS workspace.
- ROS needs to connect to the proper ROS master unique to your docker container. To find this,  run "roscore". A warning will pop up: "WARNING: ROS_MASTER_URI [http://572b15b73955:11311/] host is not set to this machine". This is because ROS is trying to connect to the ROS_MASTER_URI that was on the original container that the docker image was created on. Find a couple lines down what your ROS_MASTER_URI is, and note that down somewhere. Then, edit ~/.bashrc and at the bottom, replace the ROS_MASTER_URI with the one you noted down.
- Once the ROS_MASTER_URI is updated, exit .bashrc and run "source ~/.bashrc". Then, go back into eve_ws, and run "rossetup". This should source the proper directories and the workspace should be ready to go. You can verify if everything is working by running "roscore" and verifying that the warning from before is gone.